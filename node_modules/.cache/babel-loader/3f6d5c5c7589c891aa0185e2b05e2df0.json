{"ast":null,"code":"var _jsxFileName = \"/home/am-pc-61/jotiba/interview/src/Component/Qustions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(_ref) {\n  _s();\n\n  let {\n    quest,\n    count,\n    name,\n    data\n  } = _ref;\n  const [test, setTest] = useState([[false, false, false, false], [false, false, false, false]]);\n  console.log(test);\n  console.log(quest.type);\n\n  const onClickHandler = e => {\n    console.log(test[count]);\n    let a = [];\n\n    if (quest.type = undefined) {\n      test[count][e.target.value] = !test[count][e.target.value];\n      setTest(test);\n    } else {\n      let a = [false, false, false, false];\n      a[e.target.value] = !a[e.target.value];\n      test[count] = a;\n      setTest(test);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: quest.questionText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), quest.options.map((op, id) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: quest.type !== \"Multiple-Response\" ? \"radio\" : \"checkbox\",\n            name: \"option\",\n            checked: test[count][id],\n            value: id,\n            onChange: e => onClickHandler(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), op]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Question, \"oTJgUfTuQ7xWlhGuI2QJ26lNVxY=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/home/am-pc-61/jotiba/interview/src/Component/Qustions.js"],"names":["React","useEffect","useState","Question","quest","count","name","data","test","setTest","console","log","type","onClickHandler","e","a","undefined","target","value","questionText","options","map","op","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AACA,SAASC,QAAT,OAAgD;AAAA;;AAAA,MAA9B;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA;AAAtB,GAA8B;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAC/B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAD+B,EAE/B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAF+B,CAAD,CAAhC;AAMAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACQ,IAAlB;;AACA,QAAMC,cAAc,GAAIC,CAAD,IAAO;AAC5BJ,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACH,KAAD,CAAhB;AACA,QAAIU,CAAC,GAAC,EAAN;;AACA,QAAKX,KAAK,CAACQ,IAAN,GAAaI,SAAlB,EAA8B;AAC5BR,MAAAA,IAAI,CAACH,KAAD,CAAJ,CAAYS,CAAC,CAACG,MAAF,CAASC,KAArB,IAA8B,CAACV,IAAI,CAACH,KAAD,CAAJ,CAAYS,CAAC,CAACG,MAAF,CAASC,KAArB,CAA/B;AACAT,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAHD,MAGO;AACL,UAAIO,CAAC,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAAR;AACAA,MAAAA,CAAC,CAACD,CAAC,CAACG,MAAF,CAASC,KAAV,CAAD,GAAoB,CAACH,CAAC,CAACD,CAAC,CAACG,MAAF,CAASC,KAAV,CAAtB;AACAV,MAAAA,IAAI,CAACH,KAAD,CAAJ,GAAcU,CAAd;AACAN,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD;AAEF,GAbD;;AAcA,sBACE;AAAA,4BACE;AAAA,gBAAQJ,KAAK,CAACe;AAAd;AAAA;AAAA;AAAA;AAAA,YADF,EAEGf,KAAK,CAACgB,OAAN,CAAcC,GAAd,CAAkB,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC7B,0BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACE;AAAA,kCACE;AACE,YAAA,IAAI,EAAEnB,KAAK,CAACQ,IAAN,KAAe,mBAAf,GAAqC,OAArC,GAA+C,UADvD;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAEJ,IAAI,CAACH,KAAD,CAAJ,CAAYkB,EAAZ,CAHX;AAIE,YAAA,KAAK,EAAEA,EAJT;AAKE,YAAA,QAAQ,EAAGT,CAAD,IAAOD,cAAc,CAACC,CAAD;AALjC;AAAA;AAAA;AAAA;AAAA,kBADF,EAQGQ,EARH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAA4BC,EAA5B;AAAA;AAAA;AAAA;AAAA,cADF;AAcD,KAfA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA5CQpB,Q;;KAAAA,Q;AA6CT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nfunction Question({ quest, count, name, data }) {\n  const [test, setTest] = useState([\n    [false, false, false, false],\n    [false, false, false, false],\n  ]);\n\n\n  console.log(test);\n  console.log(quest.type);\n  const onClickHandler = (e) => {\n    console.log(test[count]);\n    let a=[]\n    if ((quest.type = undefined)) {\n      test[count][e.target.value] = !test[count][e.target.value];\n      setTest(test)\n    } else {\n      let a = [false, false, false, false];\n      a[e.target.value] = !a[e.target.value];\n      test[count] = a;\n      setTest(test)\n    }\n    \n  };\n  return (\n    <form>\n      <label>{quest.questionText}</label>\n      {quest.options.map((op, id) => {\n        return (\n          <div className=\"radio\" key={id}>\n            <label>\n              <input\n                type={quest.type !== \"Multiple-Response\" ? \"radio\" : \"checkbox\"}\n                name=\"option\"\n                checked={test[count][id]}\n                value={id}\n                onChange={(e) => onClickHandler(e)}\n              />\n              {op}\n            </label>\n          </div>\n        );\n      })}\n    </form>\n  );\n}\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}